{"version":3,"sources":["Components/Navbar-Component/AlgoSelectors.jsx","Components/Navbar-Component/ResetArray.jsx","Components/Navbar-Component/SizeSelector.jsx","Components/Navbar-Component/SpeedSelector.jsx","Components/Navbar-Component/StartButton.jsx","Assets/Logo.png","Components/Navbar.jsx","Components/Helper/InfoStore.js","Components/Info.jsx","Components/Bars.jsx","Components/Footer.jsx","Components/Helper/Swap.js","Components/SortingAlgorithms/InsertionSort.js","Components/Helper/Flags.js","Components/SortingAlgorithms/BubbleSort.js","Components/SortingAlgorithms/SelectionSort.js","Components/SortingAlgorithms/QuickSort.js","Components/SortingAlgorithms/MergeSort.js","Components/Helper/generateNewArray.js","Components/Helper/KeyGenerator.js","Components/Helper/pause.js","Components/SortingVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["AlgoButtons","props","className","onChange","e","target","value","algoLists","map","id","type","ResetArray","onClick","newList","size","setReset","disabled","disable","SizeSelector","sizeLists","SpeedSelector","speedLists","StartButton","useState","onMouseOver","start","isArraySorted","Navbar","Algorithms","speed","src","logo","alt","AlgoSelectors","reverse","href","rel","Infos","title","intro","complexity","colspan","rowspan","pseudoCode","gif","readingLink","videoLink","Info","show","setShow","iconShow","setIconShow","popup","algorithm","onMouseOut","Modal","onHide","dialogClassName","Header","closeButton","Title","Body","Footer","Button","variant","getClass","Bars","newArray","idx","classType","style","height","key","currentYear","Date","getFullYear","array","index1","index2","a","temp","swap","moves","i","length","j","push","insertionSortMoves","bubbleSortMoves","min_idx","selectionSortMoves","arr","quickSortDriver","low","high","partition","pi","pivot","QuickSort","mergeSortDriver","end","middleIndex","Math","floor","merge","sortedArray","indexes","k","MergeSort","generateNewArray","min","max","random","generateKey","res","Number","pause","Promise","resolve","setTimeout","SortingVisualizer","setArray","setSize","setSpeed","setAlgorithm","running","setRunning","setArrayIsSorted","useEffect","newArr","generateArray","tempsize","getMoves","visualiseTheAlgo","done","algochoice","console","log","visualiseGroup1Algo","visualiseGroup2Algo","currMove","index","updateClass","updateArray","shift","previous","updateValue","updateStateChange","slice","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f819aee2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction AlgoButtons(props) {\r\n    // console.log(props);\r\n    return (\r\n        <li className=\"nav-item nav-elements\">\r\n            <select className=\"form-select form-select-sm\" aria-label=\".form-select-lg example\"\r\n                onChange={(e) => {props.onChange(e.target.value, \"algorithm\")}}\r\n            >\r\n                {props.algoLists.map(value =>{\r\n                    return(\r\n                        <option\r\n                            key={value.id}\r\n                            value={value.id}\r\n                        >\r\n                            {value.type}\r\n                        </option>\r\n                    );\r\n                })}\r\n            </select>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default AlgoButtons;\r\n","import React from 'react'\r\n\r\nfunction ResetArray(props) {\r\n    return (\r\n        <li className=\"nav-item nav-elements\">\r\n                    <button \r\n                    type=\"button\" \r\n                    className=\"btn btn-outline-primary\"\r\n                    onClick={() => {props.newList(1, props.size); props.setReset(true)}}\r\n                    disabled={props.disable?true:false}\r\n                >\r\n                        Reset Array  \r\n                </button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default ResetArray;\r\n","import React from 'react'\r\n\r\nfunction SizeSelector(props) {\r\n    return (\r\n        <li className=\"nav-item nav-elements \">\r\n            <select className=\"form-select form-select-sm\" aria-label=\".form-select-lg example\"\r\n                onChange = {(e) => props.onChange(e.target.value, \"size\")}\r\n            >\r\n                {props.sizeLists.map(value =>{\r\n                    return(\r\n                        <option\r\n                            key={value}\r\n                            value={value}\r\n                        >\r\n                            {value}\r\n                        </option>\r\n                    );\r\n                })}\r\n            </select>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default SizeSelector;\r\n","import React from 'react'\r\n\r\nfunction SpeedSelector(props) {\r\n    return (\r\n        <li className=\"nav-item nav-elements\">\r\n            <select className=\"form-select form-select-sm\" aria-label=\".form-select-lg example\"\r\n                onChange={(e) => props.onChange(e.target.value, \"speed\")}\r\n            >\r\n                {props.speedLists.map(value =>{\r\n                    return(\r\n                        <option\r\n                            key={value}\r\n                            value={value}\r\n                        >\r\n                            {value}x\r\n                        </option>\r\n                    );\r\n                })}\r\n            </select>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default SpeedSelector\r\n","import React, { useState } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n\r\nfunction StartButton(props) {\r\n\r\n    const [checkAlert, setcheckAlert] = useState(false);\r\n\r\n    function checkHover(){\r\n        \r\n    }\r\n    return (\r\n        <li className=\"nav-item nav-elements\">\r\n                <button \r\n                    type=\"button\" \r\n                    className=\"btn btn-outline-primary\"\r\n                    onMouseOver={checkHover}\r\n                    onClick={() => {props.start(); props.setReset(true);}}\r\n                    disabled={(props.disable || props.isArraySorted)?true:false}\r\n                >\r\n                    Start  \r\n                </button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default StartButton\r\n","export default __webpack_public_path__ + \"static/media/Logo.fe1a48e4.png\";","import React, { useState } from 'react'\r\nimport AlgoSelectors from './Navbar-Component/AlgoSelectors';\r\nimport ResetArray from './Navbar-Component/ResetArray';\r\nimport SizeSelector from './Navbar-Component/SizeSelector';\r\nimport SpeedSelector from './Navbar-Component/SpeedSelector';\r\nimport StartButton from './Navbar-Component/StartButton';\r\nimport logo from '../Assets/Logo.png';\r\n\r\n\r\nfunction Navbar(props) {\r\n\r\n    const [Algorithms, setAlgorithms] = useState( [\r\n                                                    { id : 1, type: 'Bubble Sort' },\r\n                                                    { id : 2, type: 'Selection Sort' },\r\n                                                    { id : 3, type: 'Insertion Sort' },\r\n                                                    { id : 4, type: 'Quick Sort' },\r\n                                                    { id : 5, type: 'Merge Sort' },\r\n                                                ]);\r\n\r\n    const [size, setSize] = useState([10, 20, 30, 40, 50, 60]);\r\n    const [speed, setSpeed] = useState([0.50, 0.75, 1.00, 2.00, 4.00]);\r\n\r\n\r\n    return (\r\n        <div className=\"navbar-div\">\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        \r\n            <div className=\"navbar-brand\" >\r\n                <img src={logo} alt=\"Algo-Visualizer\"/>\r\n                <span className=\"navbrandcss\">Algo-Visualizer</span>\r\n            </div>\r\n\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav mx-auto\">\r\n\r\n                <ResetArray \r\n                    newList={props.newList} \r\n                    size={props.size} \r\n                    disable={props.disable}\r\n                    setReset = {props.setReset}\r\n                />\r\n\r\n                <AlgoSelectors \r\n                    onChange = {props.onChange}\r\n                    algoLists = {Algorithms}\r\n                />\r\n\r\n                <SizeSelector \r\n                    onChange = {props.onChange}\r\n                    sizeLists = {size.reverse()}\r\n                />\r\n\r\n                <SpeedSelector \r\n                    onChange = {props.onChange}\r\n                    speedLists = {speed.reverse()}\r\n                />\r\n\r\n                <StartButton \r\n                    size={props.size}\r\n                    newList={props.newList} \r\n                    start={props.start}\r\n                    disable={props.disable}\r\n                    setReset = {props.setReset}\r\n                    isArraySorted = {props.isArraySorted}\r\n                />\r\n                </ul>\r\n            </div>\r\n\r\n            <div className=\"iconbar\">\r\n\r\n                <a href=\"https://www.linkedin.com/in/harsh-vardhan-singh-ba02591b4/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <i className=\"fab fa-linkedin fa-lg jump\" ></i>\r\n                </a>\r\n                <a href=\"https://github.com/hvs42\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <i className=\"fab fa-github fa-lg jump\"></i>\r\n                </a>\r\n            </div>\r\n            </nav>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Navbar\r\n","const Infos = [\r\n    { id : 0, title: 'Default'},\r\n    { \r\n        id : 1, title: 'Bubble Sort',\r\n        intro : 'Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order.',\r\n\r\n        complexity : \r\n        <table>\r\n            <thead>\r\n            <tr>\r\n                <th colspan=\"3\" className=\"tbh1\">Time Complexity</th>\r\n                <th rowspan=\"2\" className=\"tbh2\">Space Complexity</th> \r\n            </tr>\r\n            <tr>\r\n                <th>Best Case</th>\r\n                <th>Average Case</th>\r\n                <th>Worst Case</th>  \r\n            </tr>             \r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>O(n)</td>\r\n                    <td>O(n<sup>2</sup>)</td>\r\n                    <td>O(n<sup>2</sup>)</td>\r\n                    <td>O(1)</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>,\r\n        // pseudoCode :\"https://pastebin.com/embed_iframe/gxXFjfRh\",\r\n        pseudoCode :\r\n        <code>\r\n          <strong>\r\n          &emsp;&emsp;&emsp;begin BubbleSort(list)                  <br /></strong>\r\n          &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;for all elements of list            <br />\r\n          &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;if list[i] &gt; list[i+1]          <br />\r\n          &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;swap(list[i], list[i+1])    <br />\r\n          &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;end if                          <br/>\r\n          &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;end for                             <br />\r\n          &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;return list                             <br />\r\n          <strong>&emsp;&emsp;&emsp;end BubbleSort   </strong>                       <br />\r\n          </code>\r\n        ,\r\n        gif : './Assets/BubbleSort.gif',\r\n\r\n        readingLink : 'https://www.geeksforgeeks.org/bubble-sort/',\r\n        videoLink : 'https://youtu.be/bBQkErahU9c'\r\n    },\r\n    {   id : 2, title: 'Selection Sort',\r\n        intro : 'Selection sort is a simple sorting algorithm. This sorting algorithm is an in-place comparison-based algorithm in which the list is divided into two parts, the sorted part at the left end and the unsorted part at the right end. Initially, the sorted part is empty and the unsorted part is the entire list.',\r\n\r\n        complexity : \r\n        <table>\r\n            <thead>\r\n            <tr>\r\n                <th colspan=\"3\" className=\"tbh1\">Time Complexity</th>\r\n                <th rowspan=\"2\" className=\"tbh2\">Space Complexity</th> \r\n            </tr>\r\n            <tr>\r\n                <th>Best Case</th>\r\n                <th>Average Case</th>\r\n                <th>Worst Case</th>  \r\n            </tr>             \r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>O(n<sup>2</sup>)</td>\r\n                    <td>O(n<sup>2</sup>)</td>\r\n                    <td>O(n<sup>2</sup>)</td>\r\n                    <td>O(1)</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>,\r\n        // pseudoCode :\"https://pastebin.com/embed_iframe/gxXFjfRh\",\r\n        pseudoCode :\r\n        <code>\r\n            procedure selection sort <br/>\r\n&emsp;&emsp;&emsp;                list  : array of items<br/>\r\n&emsp;&emsp;&emsp;                n     : size of list<br/>\r\n\r\n&emsp;&emsp;&emsp;                for i = 1 to n - 1<br/>\r\n<span className=\"comment\" >&emsp;&emsp;&emsp;                /* set current element as minimum*/</span><br/>\r\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;                    min = i    <br/>\r\n\r\n\r\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;                    for j = i+1 to n <br/>\r\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;                        if list[j] &gt; list[min] then<br/>\r\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;                            min = j;<br/>\r\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;                       end if<br/>\r\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;                    end for<br/>\r\n\r\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;                    if indexMin != i  then  <br/>\r\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;                        swap list[min] and list[i]  <br/>\r\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;                    end if<br/>\r\n&emsp;&emsp;&emsp;             end for<br/>\r\n                \r\n            end procedure <br/>\r\n        </code>\r\n        ,\r\n        gif : './Assets/BubbleSort.gif',\r\n\r\n        readingLink : 'https://www.geeksforgeeks.org/selection-sort/',\r\n        videoLink : 'https://youtu.be/B-nqY6IYqVw'\r\n     },\r\n    { id : 3, title: 'Insertion Sort',\r\n        intro : 'Insertion sort is a simple sorting algorithm that works similar to the way you sort playing cards in your hands. The array is virtually split into a sorted and an unsorted part. Values from the unsorted part are picked and placed at the correct position in the sorted part.',\r\n\r\n\r\n        complexity : \r\n        <table>\r\n            <thead>\r\n            <tr>\r\n                <th colspan=\"3\" className=\"tbh1\">Time Complexity</th>\r\n                <th rowspan=\"2\" className=\"tbh2\">Space Complexity</th> \r\n            </tr>\r\n            <tr>\r\n                <th>Best Case</th>\r\n                <th>Average Case</th>\r\n                <th>Worst Case</th>  \r\n            </tr>             \r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>O(n)</td>\r\n                    <td>O(n<sup>2</sup>)</td>\r\n                    <td>O(n<sup>2</sup>)</td>\r\n                    <td>O(1)</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>,\r\n\r\n        // pseudoCode :\"https://pastebin.com/embed_iframe/gxXFjfRh\",\r\n        pseudoCode :\r\n        <code>\r\n        procedure insertionSort( A : array of items )  <br />\r\n        &emsp;&emsp;&emsp;            int holePosition                <br />\r\n        &emsp;&emsp;&emsp;    int valueToInsert               <br />\r\n                \r\n        &emsp;&emsp;&emsp;           for i = 1 to length(A) inclusive do:        <br />\r\n                \r\n        &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;      <span className=\"comment\">          /* select value to be inserted */  </span> <br />\r\n        &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;               valueToInsert = A[i]    <br />\r\n        &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;                holePosition = i    <br />\r\n                \r\n        &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;   <span className=\"comment\">             /*locate hole position for the element to be inserted */ </span> <br />\r\n                    \r\n        &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;               while holePosition  &gt; 0 and A[holePosition-1]  &gt; valueToInsert do:    <br />\r\n        &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;                   A[holePosition] = A[holePosition-1] <br />\r\n        &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;                   holePosition = holePosition -1<br />\r\n        &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;               end while<br />\r\n                    \r\n        &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;    <span className=\"comment\">            /* insert the number at hole position */ </span><br /> \r\n        &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;               A[holePosition] = valueToInsert<br />\r\n                \r\n        &emsp;&emsp;&emsp;           end for<br />\r\n                \r\n           end procedure<br />\r\n        </code>\r\n        ,\r\n        gif : './Assets/BubbleSort.gif',\r\n\r\n        readingLink : 'https://www.geeksforgeeks.org/insertion-sort/',\r\n        videoLink : 'https://youtu.be/wWhAhp6PIuQ'\r\n    },\r\n    { id : 4, title: 'Quick Sort',\r\n        intro : 'Quick sort is a highly efficient sorting algorithm and is based on partitioning of array of data into smaller arrays. A large array is partitioned into two arrays one of which holds values smaller than the specified value, say pivot, based on which the partition is made and another array holds values greater than the pivot value. Quicksort partitions an array and then calls itself recursively twice to sort the two resulting subarrays. This algorithm is quite efficient for large-sized data sets',\r\n\r\n\r\n        complexity : \r\n        <table>\r\n            <thead>\r\n            <tr>\r\n                <th colspan=\"3\" className=\"tbh1\">Time Complexity</th>\r\n                <th rowspan=\"2\" className=\"tbh2\">Space Complexity</th> \r\n            </tr>\r\n            <tr>\r\n                <th>Best Case</th>\r\n                <th>Average Case</th>\r\n                <th>Worst Case</th>  \r\n            </tr>             \r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>O(nlog(n))</td>\r\n                    <td>O(nlog(n))</td>\r\n                    <td>O(n<sup>2</sup>)</td>\r\n                    <td>O(log(n))</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>,\r\n\r\n\r\n        // pseudoCode :\"https://pastebin.com/embed_iframe/gxXFjfRh\",\r\n        pseudoCode :\r\n        <>\r\n        <h6>Quick sort</h6>\r\n        <code>\r\n            QuickSort(arr[], low, high):  <br/>\r\n            &emsp;&emsp;&emsp;                if (low &lt; high) :  <br />\r\n            &emsp;&emsp;&emsp;     <span className=\"comment\">    /* pi is partitioning index, arr[pi] is now at right place */</span> <br/>\r\n            &emsp;&emsp;&emsp; &emsp;&emsp;&emsp;         pivot = partition(arr, low, high) <br/>\r\n\r\n            &emsp;&emsp;&emsp; &emsp;&emsp;&emsp;         quickSort(arr, low, pivot - 1)   <br/>\r\n            &emsp;&emsp;&emsp; &emsp;&emsp;&emsp;         quickSort(arr, pivot + 1, high)   <br/>\r\n            &emsp;&emsp;&emsp;     end if <br/>\r\n            end QuickSort  <br/>\r\n        </code> <br />\r\n        <h6>Partition</h6>\r\n        <code>\r\n            Partition(arr[], low, high): <br/>\r\n\r\n            &emsp;&emsp;&emsp;             <span className=\"comment\">    // pivot (Element to be placed at right position) </span> <br />\r\n            &emsp;&emsp;&emsp;     pivot = arr[high]  <br />\r\n            \r\n            &emsp;&emsp;&emsp;     i = (low - 1) <span className=\"comment\"> // Index of smaller element and indicates the                                                                      <br />\r\n            &emsp;&emsp;&emsp; &emsp;&emsp;&emsp; &emsp;&emsp;&emsp; &emsp;&emsp;&emsp; &emsp;                // right position of pivot found so far </span> <br/>\r\n\r\n            &emsp;&emsp;&emsp;     for (j = low; j &lt;= high- 1; j++): <br/>\r\n            &emsp;&emsp;&emsp; &emsp;&emsp;&emsp;     <span className=\"comment\">// If current element is smaller than the pivot  </span><br/>\r\n            &emsp;&emsp;&emsp; &emsp;&emsp;&emsp;         if (arr[j] &lt; pivot): <br />\r\n            &emsp;&emsp;&emsp; &emsp;&emsp;&emsp; &emsp;&emsp;&emsp;             i++;   <span className=\"comment\"> // increment index of smaller element</span>  <br />\r\n            &emsp;&emsp;&emsp; &emsp;&emsp;&emsp; &emsp;&emsp;&emsp;             swap arr[i] and arr[j]    <br />\r\n            &emsp;&emsp;&emsp; &emsp;&emsp;&emsp;         end if   <br />\r\n            &emsp;&emsp;&emsp;     end for  <br />\r\n\r\n            &emsp;&emsp;&emsp;     swap arr[i + 1] and arr[high]) <br/>\r\n\r\n            &emsp;&emsp;&emsp;     return (i + 1) <br/>\r\n            end Partition\r\n        </code>\r\n        </>\r\n        ,\r\n        gif : './Assets/BubbleSort.gif',\r\n\r\n        readingLink : 'https://www.geeksforgeeks.org/quick-sort/',\r\n        videoLink : 'https://youtu.be/UA_Rmjfj4bw'\r\n    },\r\n    { id : 5, title: 'Merge Sort',\r\n        intro : 'Merge Sort is one of the most popular sorting algorithms that is based on the principle of Divide and Conquer Algorithm. Here, a problem is divided into multiple sub-problems. Each sub-problem is solved individually. Finally, sub-problems are combined to form the final solution.',\r\n\r\n        complexity : \r\n        <table>\r\n            <thead>\r\n            <tr>\r\n                <th colspan=\"3\" className=\"tbh1\">Time Complexity</th>\r\n                <th rowspan=\"2\" className=\"tbh2\">Space Complexity</th> \r\n            </tr>\r\n            <tr>\r\n                <th>Best Case</th>\r\n                <th>Average Case</th>\r\n                <th>Worst Case</th>  \r\n            </tr>             \r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>O(nlog(n))</td>\r\n                    <td>O(nlog(n))</td>\r\n                    <td>O(nlog(n))</td>\r\n                    <td>O(n)</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>,\r\n\r\n\r\n        // pseudoCode :\"https://pastebin.com/embed_iframe/gxXFjfRh\",\r\n        pseudoCode :\r\n        <>\r\n        <h6>Merge sort</h6>\r\n        <code>\r\n           MergeSort(arr, left, right): <br/>\r\n           &emsp;&emsp;&emsp;                 if left &gt; right <br/>\r\n           &emsp;&emsp;&emsp; &emsp;&emsp;&emsp;                     return<br/>\r\n           &emsp;&emsp;&emsp;                 mid = (left+right)/2<br/>\r\n           &emsp;&emsp;&emsp;                mergeSort(arr, left, mid)<br/>\r\n           &emsp;&emsp;&emsp;                mergeSort(arr, mid+1, right)<br/>\r\n           &emsp;&emsp;&emsp;                 merge(arr, left, mid, right)<br/>\r\n            end<br/>\r\n\r\n\r\n        </code> <br />\r\n        <h6>Merge</h6>\r\n        <code>\r\n            Merge(arr, start, mid, end): <br/>\r\n            &emsp;&emsp;&emsp;                 i = start;                  <br/>\r\n            &emsp;&emsp;&emsp;     j = middleIndex + 1;        <br/>\r\n            &emsp;&emsp;&emsp;     k = start                      <br/>\r\n            &emsp;&emsp;&emsp;     copyArray = arr;               <br/>\r\n            &emsp;&emsp;&emsp;     while (i &lt;= mid && j &lt;= end) <br/>\r\n            &emsp;&emsp;&emsp; &emsp;&emsp;&emsp;         if ( copyArray[i] &lt;= copyArray[j] ) <br/>\r\n            &emsp;&emsp;&emsp; &emsp;&emsp;&emsp; &emsp;&emsp;&emsp;             arr[k++] = copyArray[i++]    <br/>\r\n            &emsp;&emsp;&emsp; &emsp;&emsp;&emsp;         else                                <br/>\r\n            &emsp;&emsp;&emsp; &emsp;&emsp;&emsp; &emsp;&emsp;&emsp;             arr[k++] = copyArray[j++]           <br/>\r\n            &emsp;&emsp;&emsp; &emsp;&emsp;&emsp;         end if                                  <br/>\r\n            &emsp;&emsp;&emsp;     end while                                   <br/>\r\n                \r\n            &emsp;&emsp;&emsp;     while (i &lt;= mid)                          <br/>\r\n            &emsp;&emsp;&emsp; &emsp;&emsp;&emsp;         arr[k++] = copyArray[i++]                  <br/>\r\n            &emsp;&emsp;&emsp;     end while                                      <br/>\r\n                \r\n            &emsp;&emsp;&emsp;     while (j &lt;= end)                             <br/>\r\n            &emsp;&emsp;&emsp; &emsp;&emsp;&emsp;         arr[k++] = copyArray[j++]                   <br/>\r\n            &emsp;&emsp;&emsp;     end while                                       <br/>\r\n                \r\n                return arr;                                <br/>\r\n                end Merge\r\n        </code>\r\n        </>\r\n        ,\r\n        gif : './Assets/BubbleSort.gif',\r\n\r\n        readingLink : 'https://www.geeksforgeeks.org/merge-sort/',\r\n        videoLink : 'https://youtu.be/aDX3MFL0tYs'\r\n    },\r\n];\r\n\r\n\r\n\r\nexport default Infos;","import React, { useState } from 'react'\r\nimport {Modal, Button} from 'react-bootstrap';\r\nimport Infos from './Helper/InfoStore';\r\n// import BubbleSortgif from '../Assets/BubbleSortgif.gif';\r\n\r\nfunction Info(props) {\r\n    const [show, setShow] = useState(false);\r\n    const [iconShow, setIconShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n    let popup = Infos[props.algorithm];\r\n\r\n  return (\r\n    <>\r\n      <div >\r\n        <i onClick={handleShow} onMouseOver={() => setIconShow(true)} onMouseOut={() => setIconShow(false)} className=\"fas fa-info-circle fa-2x info-icon\"></i>\r\n        <div id=\"fade-in\" className={iconShow?\"icon-div show\":\"icon-div\"}>\r\n           <strong> <span className=\"icon-span\"> About {popup.title}  </span></strong>\r\n        </div>\r\n      </div>\r\n\r\n      <Modal show={show} onHide={handleClose} dialogClassName=\"my-modal\">\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{popup.title}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n\r\n            <h6>{popup.intro}</h6><br />\r\n\r\n            {/* <img src={BubbleSortgif} alt=\"Bubble Sort\" /> <br /> */}\r\n\r\n            <h5><u>Complexity Analysis :- </u></h5> <br />\r\n            {popup.complexity} <br />\r\n            <h5> <u>Algorithm :- </u></h5>\r\n            {popup.pseudoCode}\r\n\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <a href={popup.readingLink} target=\"_blank\" rel=\"noreferrer noopener\">\r\n                <Button variant=\"secondary\">\r\n                    Read More\r\n                </Button>\r\n            </a>\r\n\r\n            <a href={popup.videoLink} target=\"_blank\" rel=\"noreferrer noopener\">\r\n                <Button variant=\"primary\">\r\n                    Watch Video\r\n                </Button>\r\n            </a>\r\n\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Info;\r\n","import React from 'react';\r\n\r\nfunction Bars(props) {\r\n    return (\r\n        <div className=\"array-container\">\r\n            \r\n                {\r\n                    props.newArray.map((value, idx) => {\r\n\r\n                        return(\r\n                            <div \r\n                                className= {\"bars \" + getClass(value.classType)}\r\n                                key={idx} \r\n                                style={{height: `${value.key}px`}}\r\n                                value={value.key}\r\n                            >\r\n                            {/* <span>{value.key}</span> */}\r\n                            </div>\r\n                        );\r\n                    })\r\n                }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst getClass = (value) => {\r\n    if(value === 0) return 'array-bar';\r\n    else if(value === 1) return 'array-bar current';\r\n    return 'array-bar done';\r\n};\r\nexport default Bars;","import React from 'react'\r\n\r\nfunction Footer() {\r\n\r\n    /*\r\n        Size of fontawesome icon :- https://fontawesome.com/v5.15/how-to-use/on-the-web/styling/sizing-icons\r\n    */\r\n\r\n    let currentYear = new Date().getFullYear();\r\n\r\n\r\n    return (\r\n    <footer id=\"footer\">\r\n          \r\n          {/* <a>\r\n            <i className=\"fas fa-envelope\"></i>\r\n          </a>\r\n          <a>\r\n            <i className=\"social-icon fab fa-facebook-f\"></i>\r\n          </a> */}\r\n         <strong> <p className=\"copyright\">© Copyright {currentYear} - Harsh Vardhan Singh</p></strong>\r\n      </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;\r\n","async function swap (array, index1, index2)\r\n{\r\n    let temp = array[index1];\r\n    array[index1] = array[index2];\r\n    array[index2] = temp;\r\n}\r\n\r\nexport default swap;","import { SWAP } from \"../Helper/Flags\";\r\nimport swap from \"../Helper/Swap\";\r\n\r\nasync function insertionSortMoves(array)\r\n{\r\n    let moves = [];\r\n\r\n    for(let i=0; i<array.length-1; i++)\r\n    {\r\n        let j = i;\r\n\r\n        while(j>=0 && array[j] > array[j+1])\r\n        {\r\n            await swap(array, j, j+1);\r\n            moves.push([j, j+1, SWAP]);\r\n            j--;\r\n        }\r\n    }\r\n\r\n    return moves;\r\n}\r\n\r\nexport default insertionSortMoves;","// for swapping\r\nexport const SWAP = 1;\r\nexport const CHANGE_VALUE = 2;\r\nexport const HIGHLIGHT = 3;\r\n\r\n// for option menu\r\nexport const ALGORITHM = \"algorithm\";\r\nexport const SPEED = \"speed\";\r\nexport const SIZE = \"size\";\r\n\r\n// for updating the classes\r\nexport const CURRENT = 1;\r\nexport const NORMAL = 0;\r\nexport const DONE = 2;","import { SWAP } from \"../Helper/Flags\";\r\nimport swap from \"../Helper/Swap\";\r\n\r\nasync function bubbleSortMoves(array)\r\n{\r\n    const moves = [];\r\n    // const sortedIndex = [];\r\n\r\n    for(let i=0; i<array.length-1; i++)\r\n    {\r\n        for(let j=0; j<array.length-i-1; j++)\r\n        {\r\n            if(array[j] > array[j+1])\r\n            {\r\n                await swap(array, j, j+1);\r\n                moves.push([j, j+1, SWAP]);\r\n            }\r\n            else\r\n            {\r\n                moves.push([j, j+1, !SWAP]);\r\n            }\r\n            // sortedIndex.push(array.length-1);\r\n        }\r\n\r\n        // sortedIndex.push(array.length-1);\r\n    }\r\n\r\n    // return array;\r\n    return moves;\r\n}\r\n\r\nexport default bubbleSortMoves;","import { SWAP } from \"../Helper/Flags\";\r\nimport swap from \"../Helper/Swap\";\r\n\r\nasync function selectionSortMoves(array)\r\n{\r\n    const moves = [];\r\n    const size = array.length;\r\n\r\n    for (let i = 0; i < size - 1; i++)\r\n    {\r\n        let min_idx = i;\r\n        for (let j = i + 1; j < size; j++)\r\n        {\r\n            if (array[j] < array[min_idx])\r\n            {\r\n                    min_idx = j;\r\n            }\r\n\r\n            moves.push([j, min_idx, !SWAP]);\r\n        }\r\n\r\n        await swap(array, min_idx, i);\r\n        moves.push([i, min_idx, SWAP]);\r\n    }\r\n\r\n    return moves;\r\n}\r\n\r\nexport default selectionSortMoves;","import { SWAP } from \"../Helper/Flags\";\r\nimport swap from \"../Helper/Swap\";\r\n\r\nasync function QuickSort(arr)\r\n{\r\n    let moves = [];\r\n    await quickSortDriver(arr, 0, arr.length-1, moves);\r\n\r\n    return moves;\r\n}\r\n\r\nasync function quickSortDriver(arr, low, high, moves)\r\n{\r\n    if (low < high) \r\n    { \r\n        let pi = await partition(arr, low, high, moves); \r\n  \r\n        await quickSortDriver(arr, low, pi - 1, moves); \r\n        await quickSortDriver(arr, pi + 1, high, moves); \r\n    } \r\n}\r\n\r\nasync function partition(arr, low, high, moves)\r\n{\r\n    let pivot = arr[high];\r\n    let i = (low - 1);\r\n  \r\n    for (let j = low; j <= high - 1; j++) \r\n    { \r\n        if(j !== high)\r\n        {\r\n            moves.push([high, j, !SWAP]);\r\n        }\r\n        if (arr[j] < pivot) \r\n        { \r\n            i++; \r\n            await swap(arr, i, j);\r\n            moves.push([i, j, SWAP]);\r\n        } \r\n    } \r\n\r\n    await swap(arr, i+1, high);\r\n    moves.push([i+1, high, SWAP]);\r\n\r\n    return (i + 1);\r\n}\r\n\r\nexport default QuickSort;\r\n","import { CHANGE_VALUE } from \"../Helper/Flags\";\r\n\r\nasync function MergeSort(array)\r\n{\r\n\r\n    const  moves = [];\r\n\r\n    await mergeSortDriver(array, 0, array.length - 1,  moves);\r\n\r\n    return  moves;\r\n}\r\n\r\nasync function mergeSortDriver(array, start, end,  moves)\r\n{\r\n    if(start < end)\r\n    {\r\n        const middleIndex = Math.floor((start + end) / 2);\r\n\r\n        await mergeSortDriver(array, start, middleIndex, moves);\r\n        await mergeSortDriver(array, middleIndex+1, end, moves);\r\n        await merge(array, start, middleIndex,end, moves);\r\n    }\r\n}\r\n\r\nasync function merge(array, start, middleIndex, end, moves)\r\n{\r\n    let i = start;\r\n    let j = middleIndex + 1;\r\n    let sortedArray = [];\r\n\r\n    while(i<=middleIndex && j<=end)\r\n    {\r\n        if(array[i] <= array[j])\r\n        {\r\n            sortedArray.push(array[i]);\r\n            i++;\r\n        }\r\n        else\r\n        {\r\n            sortedArray.push(array[j]);\r\n            j++;\r\n        }\r\n    }\r\n\r\n    while(i<=middleIndex)\r\n    {\r\n        sortedArray.push(array[i]);\r\n        i++;\r\n    }\r\n\r\n    while(j<=end)\r\n    {\r\n        sortedArray.push(array[j]);\r\n        j++;\r\n    }\r\n\r\n    let indexes = [];\r\n\r\n    for(let k=start; k<=end; k++)\r\n    {\r\n        indexes.push(k);\r\n    }\r\n\r\n    for(let k=start; k<=end; k++)\r\n    {\r\n        array[k] = sortedArray[k-start];\r\n        moves.push([k, array[k], CHANGE_VALUE, indexes]);\r\n    }\r\n}\r\n\r\nexport default MergeSort;","function randomRange(min, max)\r\n{\r\n    return Math.floor( (Math.random() * (max-min +1) ) + min );\r\n}\r\n\r\nfunction generateNewArray(length)\r\n{\r\n    let newArray = [];\r\n\r\n    for(let i=0; i<length; i++)\r\n    {\r\n        newArray.push({key : randomRange(1, 100)*4, classType : 0});\r\n    }\r\n    \r\n    return newArray;\r\n}\r\n\r\nexport default generateNewArray;","\r\nfunction generateKey(array) {\r\n    let res = [];\r\n    for(let i=0; i<array.length; i++)\r\n    {\r\n        res.push(Number(array[i].key));\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nexport default generateKey;","const pause = async(speed) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(() => {\r\n            resolve();\r\n        }, 200/speed);\r\n    });\r\n}\r\n\r\nexport default pause;","import React, { useEffect, useState } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\n//Importing Components\r\nimport Navbar from \"./Navbar\";\r\nimport Info from './Info';\r\nimport Bars from './Bars';\r\nimport Footer from './Footer';\r\n// import Timer from './Timer/Timer';\r\n\r\n//Importing algorithms \r\n\r\nimport insertionSortMoves from './SortingAlgorithms/InsertionSort';\r\nimport bubbleSortMoves from './SortingAlgorithms/BubbleSort';\r\nimport selectionSortMoves from './SortingAlgorithms/SelectionSort';\r\nimport QuickSort from './SortingAlgorithms/QuickSort';\r\nimport MergeSort from './SortingAlgorithms/MergeSort';\r\n\r\n//importing Helpers \r\n\r\nimport generateNewArray from './Helper/generateNewArray';\r\nimport generateKey from './Helper/KeyGenerator';\r\nimport pause from './Helper/pause';\r\n\r\n//importing Flags\r\n\r\nimport { SWAP} from './Helper/Flags';\r\n\r\nimport { ALGORITHM, SPEED, SIZE } from './Helper/Flags';\r\n\r\nimport { CURRENT, NORMAL, DONE } from './Helper/Flags';\r\n\r\n\r\nfunction SortingVisualizer() {\r\n\r\n    const [array, setArray] = useState([]);\r\n    const [size, setSize] = useState(40);\r\n    const [speed, setSpeed] = useState(4);\r\n    const [algorithm, setAlgorithm] = useState(1);\r\n    const [running, setRunning] = useState(false);\r\n    const [reset, setReset] = useState(false);\r\n    const [isArraySorted, setArrayIsSorted] = useState(false);\r\n\r\n    useEffect(() => {\r\n       let newArr = generateNewArray(40);\r\n\r\n       setArray(newArr);\r\n\r\n    },[]);\r\n\r\n    return (\r\n        <>\r\n            <Navbar \r\n                start={start}\r\n                onChange = {onChange}\r\n                newList={generateArray}\r\n                size={size}\r\n                disable={running}\r\n                setReset={setReset}\r\n                isArraySorted={isArraySorted}\r\n            />\r\n\r\n            <Info algorithm={algorithm} /> \r\n            {/* <Timer reset={reset} running={running} setReset={setReset}/> */}\r\n            <Bars newArray={array}/>\r\n\r\n            <ToastContainer />\r\n            <Footer />\r\n        </>\r\n    );\r\n\r\n\r\n    \r\n\r\n    function onChange(value, target)\r\n    {\r\n        if(target === ALGORITHM && !running)\r\n        {\r\n            setAlgorithm(Number(value));\r\n        }\r\n        else if(target === SIZE && !running)\r\n        {\r\n            setSize(Number(value));\r\n            generateArray(0, value);\r\n        }\r\n        else if(target === SPEED)\r\n        {\r\n            setSpeed(Number(value));\r\n        }\r\n    }\r\n\r\n    function generateArray(value = 0, tempsize)\r\n    {\r\n        if((tempsize !== size  &&  !running) || value === 1)\r\n        {\r\n            // console.log(\"called\")\r\n            let newArr = generateNewArray(Number(tempsize));\r\n            setArray(newArr);\r\n            setArrayIsSorted(false);\r\n            // console.log(array.length);\r\n        }\r\n    }\r\n\r\n    async function start()\r\n    {\r\n        // console.log(\"start\")\r\n        setRunning(true);\r\n\r\n        let moves = await getMoves(algorithm);\r\n        await visualiseTheAlgo(moves);\r\n        await done();\r\n        \r\n        setRunning(false);\r\n    }\r\n    \r\n    async function getMoves(algochoice)\r\n    {\r\n        let arr = await generateKey(array);\r\n        // console.log(algochoice);\r\n        let moves = [];\r\n        \r\n        switch(Number(algochoice))\r\n        {\r\n            case 1 : //console.log(\"Bubble\");\r\n                    moves = await bubbleSortMoves(arr);\r\n            break;\r\n\r\n\r\n            case 2 : //console.log(\"Selection\");\r\n                    moves = await selectionSortMoves(arr);\r\n            break;\r\n\r\n\r\n            case 3 : //console.log(\"Insertion\");\r\n                    moves = await insertionSortMoves(arr);\r\n            break;\r\n\r\n            \r\n            case 4 : console.log(\"Quick\");\r\n                    moves = await QuickSort(arr);\r\n            break;\r\n\r\n            case 5 : console.log(\"Merge\");\r\n                        moves = await MergeSort(arr);\r\n            break;  \r\n                \r\n                \r\n            default : console.log(\"Wrong Input\"); \r\n        }\r\n\r\n        return moves;\r\n    }\r\n\r\n    async function visualiseTheAlgo(moves)\r\n    {\r\n        if(moves.length === 0)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if(moves[0].length !== 4)\r\n        {\r\n            await visualiseGroup1Algo(moves);\r\n        }\r\n        else\r\n        {\r\n            console.log(\"Entering\");\r\n            await visualiseGroup2Algo(moves);\r\n        }\r\n    }\r\n\r\n    async function visualiseGroup1Algo(moves)\r\n    {\r\n        \r\n        //console.log(\"array :- \" + array.key);\r\n        while(moves.length > 0)\r\n        {\r\n            let currMove = moves[0];\r\n            \r\n            let index = [currMove[0], currMove[1]];\r\n\r\n\r\n            \r\n          //  console.log(\"moves :- \" + moves);\r\n            //console.log(\"index :- \" + index);\r\n\r\n            await updateClass(index, CURRENT);\r\n\r\n            if(currMove[2] === SWAP)\r\n            {\r\n                await updateArray(index);\r\n            }\r\n\r\n            await updateClass(index, NORMAL);\r\n            \r\n          //  console.log(\"array :- \" + array.key);\r\n\r\n            moves.shift();\r\n        }\r\n    }\r\n\r\n    async function visualiseGroup2Algo(moves)\r\n    {\r\n        let previous = [];\r\n        while(moves.length > 0)\r\n        {\r\n            if(previous !== moves[0][3])\r\n            {\r\n                await updateClass(previous, NORMAL);\r\n                previous = moves[0][3];\r\n                await updateClass(moves[0][3], CURRENT);\r\n            }\r\n\r\n            let index = [moves[0][0], moves[0][1]];\r\n            await updateValue(index);\r\n\r\n            moves.shift();\r\n        }\r\n    }\r\n\r\n    async function updateArray(index)\r\n    {\r\n        let arr = [...array]\r\n        \r\n        let temp = arr[index[0]].key;\r\n        arr[index[0]].key = arr[index[1]].key;\r\n        arr[index[1]].key = temp;\r\n\r\n        await updateStateChange(arr);\r\n    }\r\n\r\n    \r\n\r\n    async function updateValue(index)\r\n    {\r\n        let arr = [...array];\r\n\r\n        arr[index[0]].key = index[1];\r\n\r\n        await updateStateChange(arr);\r\n    }\r\n\r\n\r\n\r\n    async function updateClass(index, classType)\r\n    {\r\n        let arr = [...array];\r\n        for(let i=0; i<index.length; i++)\r\n        {\r\n            arr[index[i]].classType = classType;\r\n        }\r\n\r\n        await updateStateChange(arr);\r\n    }\r\n\r\n    async function updateStateChange(arr)\r\n    {\r\n        setArray(arr);\r\n        await pause(speed);\r\n    }\r\n\r\n    async function done()\r\n    {\r\n        setArrayIsSorted(true);\r\n        let arr = array.slice();\r\n        for(let i=0; i<arr.length; i++)\r\n        {\r\n            arr[i].classType = DONE;\r\n        }\r\n        toast.success(' Array Sorted ', {\r\n            position: \"bottom-right\",\r\n            autoClose: 3000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        });\r\n        updateStateChange(arr);\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default SortingVisualizer;\r\n","import './App.css';\r\nimport SortingVisualizer from './Components/SortingVisualizer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"content\">\r\n      <SortingVisualizer></SortingVisualizer>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}